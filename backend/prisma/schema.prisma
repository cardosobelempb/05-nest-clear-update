// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  CLIENT
  SUPPLIER
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  phone     String
  isActive  Boolean   @default(true)
  role      Roles     @default(CLIENT)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  availablesTimes AvailableTime[]
  services        Service[]
  categories      Category[]
  appointments    Appointment[]
  comments        Comment[]
  sttachements    Attachement[]

  @@map("users")
}

model AvailableTime {
  id        String    @id @default(uuid())
  time      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  appointments Appointment[]

  @@map("available_times")
}

model Service {
  id        String    @id @default(uuid())
  name      String
  price     Decimal?  @db.Money()
  duration  String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])

  appointments Appointment[]
  comments     Comment[]
  attachements Attachement[]

  @@map("services")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  services Service[]

  @@map("categories")
}

enum AppointmentStatus {
  ATTENDED
  SCHEDULED
  CANCELLED
  INATTENDANCE
}

model Appointment {
  id        String            @id @default(uuid())
  status    AppointmentStatus @default(SCHEDULED)
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime?         @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  availableTimeId String         @map("available_time_id")
  availableTime   AvailableTime? @relation(fields: [availableTimeId], references: [id])

  serviceId String   @map("service_id")
  service   Service? @relation(fields: [serviceId], references: [id])

  @@map("appointments")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("comments")
}

model Attachement {
  id        String    @id @default(uuid())
  title     String
  url       String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("attachements")
}
