// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  phone     String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  appointmentTimes     AppointmentTime[]
  appointmentServices  AppointmentService[]
  appointmentCategorys AppointmentCategory[]
  appontments          Appontment[]

  @@map("users")
}

model AppointmentTime {
  id        String    @id @default(uuid())
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  appontments         Appontment[]
  appointmentServices AppointmentService[]

  @@map("appointment_times")
}

model AppointmentService {
  id        String    @id @default(uuid())
  name      String
  price     Decimal
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  appointmentTimeId String          @map("appointment_time_id")
  appointmentTime   AppointmentTime @relation(fields: [appointmentTimeId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  appontments Appontment[]

  @@map("appointment_services")
}

model AppointmentCategory {
  id        String    @id @default(uuid())
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("appointment_categories")
}

model Appontment {
  id        String    @id @default(uuid())
  status    String    @default("agendado")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  appointmentTimeId String?          @map("appontment_time_id")
  appointmentTime   AppointmentTime? @relation(fields: [appointmentTimeId], references: [id])

  appointmentServiceId String?             @map("appointment_service_id")
  appointmentService   AppointmentService? @relation(fields: [appointmentServiceId], references: [id])

  @@map("appontments")
}
